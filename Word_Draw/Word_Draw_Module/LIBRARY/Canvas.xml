<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Canvas" itemID="67bfd473-000008e2" lastModified="1741600828" lastUniqueIdentifier="1">
  <timeline>
    <DOMTimeline name="Canvas" layerDepthEnabled="true">
      <layers>
        <DOMLayer name="Layer_3" color="#FF800A" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Framescript language="JavaScript">
                <script><![CDATA[var root = this;

// ===================== 단어 획 
const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

let currentWords = [];

// 단어별 획의 좌표 배열
let wordsStrokePoints = [];

let wordCompletionStatus = [];

// 현재 체크할 좌표 인덱스
let currentPointIndex = 0;

// 사용자가 획을 그을 때 허용 오차(픽셀 단위)
let tolerance = 45; 

// 다음으로 넘어가기 위한 범위
let nextTargetRange = 40; 

// ===================== 캔버스
var drawImage = null;
var currentCanvas = null;

var lastPoint;
var strokes = [];
var currentStroke = null;
var isDrawable = true;

var canvasOffsetY = 0;
var canvasOffsetX = 0;

var clearColor = 0x00000000;

// ======= 브러쉬 & 그리기
var pointerID = -1;

var paletteColor = "#088fdd";

const ORIGIN_BRUSH_SCALE = 2.5;
const ENLARGED_BRUSH_SCALE = 3;
var brushScale = ORIGIN_BRUSH_SCALE;

var isBrushScaleOrigin;

var brushConfig = {
    color: null,
    originBrushHSizeW: 16,
    originBrushHSizeH: 16,
    brushHSizeW: 16,
    brushHSizeH: 16,
    isRandom: false,
    dist: 4,
    drawRange: 1
};

var brushColorBitmaps = [];

var isDrawing = false;

(function init() {
    // setWordStroke가 먼저 호출되어 작업들을 해줘야 함
    setWordStroke();

    setCanvasSetting();
}());

function setCanvasSetting() {

    currentWords.forEach(ch => {
        console.log(`%ccurrent word : ${ch}`, "color:#fe6ca4");

        initializeBitmapLayer(root[`word_${ch}`]);
    });

    currentCanvas = root.word_a;

    canvasOffsetX = currentCanvas.x;
    canvasOffsetY = currentCanvas.y;

    UpdateBitmapLayerCache();
    clearCanvas();

    Initpalette();
}

/**
 * drawImage에 대한 Bitmap 관련 기능 초기화
 * @param {MovieClip} drawImage 
 */
function initializeBitmapLayer(drawImage) {
    const bound = drawImage.getBounds();

    drawImage.BitmapData = new createjs.BitmapData(null, bound.width, bound.height, clearColor);
    drawImage.Board = new createjs.Bitmap(drawImage.BitmapData.canvas);

    drawImage.Image.cache(0, 0, bound.width, bound.height);

    drawImage.BitmapLayer.addChild(drawImage.Board);
    drawImage.BitmapLayer.mouseChildren = false;
    drawImage.BitmapLayer.mouseEnabled = false;
    drawImage.BitmapLayer.cache(0, 0, bound.width, bound.height);
    drawImage.BitmapData.clearRect(0, 0, bound.width, bound.height);

    // 그리기 영역만 보여주기 위해 AlphaMaskFilter 적용
    drawImage.BitmapLayer.filters = [new createjs.AlphaMaskFilter(drawImage.Image.cacheCanvas)];
    drawImage.BitmapLayer.updateCache();
}

function drawImageHandleMouseDown(drawImage, event) {
    canvasOffsetX = currentCanvas.x;
    canvasOffsetY = currentCanvas.y;

    OnDrawStart(event);
}

function cacheAndClearBitmapLayers() {
    const bound = currentCanvas.getBounds();

    currentCanvas.BitmapLayer.cache(0, 0, bound.width, bound.height);
    currentCanvas.BitmapData.clearRect(0, 0, bound.width, bound.height);
}

function Initpalette() {

    var bmpBrush = new lib["brush"];

    bmpBrush.cache(0, 0, 32, 32, brushScale);

    brushConfig.brushHSizeW = brushConfig.originBrushHSizeW * brushScale;
    brushConfig.brushHSizeH = brushConfig.originBrushHSizeH * brushScale;

    var _source = createjs.BitmapData.getBitmapData(bmpBrush);

    brushColorBitmaps = GetBrushColorBitmaps(_source, paletteColor);
    brushConfig.brush = brushColorBitmaps[0];
}

function OnDrawStart(e) {

    if (pointerID != -1 && !CheckPointerID(e))
        return;

    brushScale = ORIGIN_BRUSH_SCALE;

    brushConfig.brushHSizeW = brushConfig.originBrushHSizeW * brushScale;
    brushConfig.brushHSizeH = brushConfig.originBrushHSizeH * brushScale;

    lastPoint = wordsStrokePoints[currentCanvas.ch][currentCanvas.currentPointIndex];

    pointerID = e.pointerID;
    currentCanvas.Board.name = "Board";

    currentCanvas.BitmapLayer.updateCache();
    currentCanvas.BitmapLayer.addChild(currentCanvas.Board);

    currentStroke = {
        x: [],
        y: []
    };

    drawBrush(lastPoint.x, lastPoint.y);
    AddStroke(lastPoint.x, lastPoint.y);

    isDrawing = true;
}

function OnDrawBrush(e) {
    if (!CheckPointerID(e))
        return;

    if (currentStroke == null) {
        return;
    }

    // console.log("OnDrawBrush");

    var currentPoint = wordsStrokePoints[currentCanvas.ch][currentCanvas.currentPointIndex + 1];;

    DrawLine(lastPoint, currentPoint);
    AddStroke(currentPoint.x, currentPoint.y);

    lastPoint = currentPoint;
}

function calculateMinMax(stroke, canvasWidth, canvasHeight) {
    var minX = Math.min(...stroke.x);
    var minY = Math.min(...stroke.y);
    var maxX = Math.max(...stroke.x);
    var maxY = Math.max(...stroke.y);

    return {
        minX: Math.min(canvasWidth, minX),
        minY: Math.min(canvasHeight, minY),
        maxX: Math.max(0, maxX),
        maxY: Math.max(0, maxY)
    };
}

function calculateCanvasRect(minMax, brushHSizeW, brushHSizeH) {
    const cx = Math.max(0, minMax.minX - brushHSizeW);
    const cy = Math.max(0, minMax.minY - brushHSizeH);
    const cw = Math.min(currentCanvas.nominalBounds.width, minMax.maxX + brushHSizeW);
    const ch = Math.min(currentCanvas.nominalBounds.height, minMax.maxY + brushHSizeH);

    return new createjs.Rectangle(cx, cy, cw - cx, ch - cy);
}

function OnDrawEnd(e) {
    if (!CheckPointerID(e))
        return;

    isDrawing = false;

    const canvasBound = currentCanvas.nominalBounds;
    const brushHSizeW = brushConfig.brushHSizeW;
    const brushHSizeH = brushConfig.brushHSizeH;

    const minMax = calculateMinMax(currentStroke, canvasBound.width, canvasBound.height);
    const cRect = calculateCanvasRect(minMax, brushHSizeW, brushHSizeH);

    // 현재 그린 그림을 복사
    var cvs = CreateCanvas(currentCanvas.BitmapData.canvas, -cRect.x, -cRect.y, cRect.width, cRect.height);

    // 그린거 추가
    var strokeBmp = new createjs.Bitmap(cvs);

    strokeBmp.set({
        x: cRect.x,
        y: cRect.y,
        name: "bitmap_" + currentCanvas.numChildren
    });

    currentCanvas.BitmapLayer.addChild(strokeBmp);

    resetCanvasState();
}

/**
 * Canvas 상태 초기화
 */
function resetCanvasState() {
    // console.log("resetCanvasState");

    pointerID = -1;
    currentStroke = null;

    clearCanvas();
    UpdateBitmapLayerCache();
}

function CreateCanvas(source, x, y, width, height) {
    // CanvasElement 생성
    var cvs = document.createElement("canvas");

    // 생성한 canvas 크기 설정
    cvs.width = width;
    cvs.height = height;

    // context 가져와서 source 그려서 복사
    cvs.getContext("2d").drawImage(source, x, y);

    return cvs;
}

// _source type: bitmapData
function GetBrushColorBitmaps(_source, paletteColor) {

    var bWidth = _source.width;
    var bHeight = _source.height;
    var brushArr = [];

    var rgb = hexToRgb(paletteColor);

    var colorTransform = new createjs.ColorTransform(0, 0, 0, 1, rgb.r, rgb.g, rgb.b);
    var paletteBrush = new createjs.BitmapData(null, bWidth, bHeight, null);
    paletteBrush.clearRect(0, 0, bWidth, bHeight);
    paletteBrush.draw(_source, null, colorTransform, null, null, true);

    brushArr.push(paletteBrush);

    return brushArr;
}

function AddStroke(tx, ty) {
    currentStroke.x.push(tx);
    currentStroke.y.push(ty);
}

function DrawLine(fromPoint, toPoint) {
    var distOffset = brushConfig.dist; //4;

    var dist = distanceBetween(fromPoint, toPoint) / distOffset;
    var angle = angleBetween(fromPoint, toPoint);

    for (var i = 0; i < dist; i++) {
        var distVal = i * distOffset;
        var dx = fromPoint.x + (Math.sin(angle) * distVal);
        var dy = fromPoint.y + (Math.cos(angle) * distVal);

        drawBrush(dx, dy);
    }
}

function drawBrush(tx, ty) {
    var matrix = new createjs.Matrix2D();

    matrix.translate(
        tx - (brushConfig.brushHSizeW),
        ty - (brushConfig.brushHSizeH)
    );

    currentCanvas.BitmapData.draw(brushConfig.brush, matrix, null, null, null, true);
    currentCanvas.BitmapLayer.updateCache();
}

function GetPosition(e) {
    return {
        x: e.stageX / stage.scaleX - canvasOffsetX,
        y: e.stageY / stage.scaleY - canvasOffsetY
    };
}

function GetRandomMinMax(min, max) {
    return Math.random() * (max - min) + min;
}

function clearCanvas() {
    currentCanvas.BitmapData.clearRect(0, 0, currentCanvas.nominalBounds.width, currentCanvas.nominalBounds.height);
}

function UpdateBitmapLayerCache() {
    currentCanvas.BitmapLayer.updateCache();
}

function CheckPointerID(e) {
    var pid = e.pointerID;
    return pointerID == pid;
}

function distanceBetween(point1, point2) {
    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
}

function angleBetween(point1, point2) {
    return Math.atan2(point2.x - point1.x, point2.y - point1.y);
}

/**
 * 단어 획 그리기 세팅
 */
function setWordStroke() {

    wordsStrokePoints = getWordsStrokePathPoints();

    console.log(wordsStrokePoints);

    currentWords.forEach(_ch => {
        const ch = _ch;

        const word = root[`word_${ch}`];
        word.ch = ch;

        word.hasMultipleStrokes = word.labels.length != 0;
        word.currentLabelIndex = 0;
        word.currentPointIndex = 0;

        wordCompletionStatus[ch] = false;

        word.on("mousedown", (event) => {
            let pt = { x: event.localX, y: event.localY };

            if (currentCanvas != word) {
                currentCanvas = word;
                currentCanvas.currentPointIndex = 0;
            }

            console.log(`%c여기요~`, "color:#ebbcce")

            // 시작 위치의 근처일 때
            if (checkIfNearPoint(word.ch, pt, currentCanvas.currentPointIndex)) {
                handleNearPoint(word.ch, event);
            } else {
                console.log("시작 위치가 잘못됨");
            }
        });
    });
}

/**
 * 시작 위치에서 제대로 시작했을 때
 */
function handleNearPoint(ch, event) {
    drawImageHandleMouseDown(currentCanvas, event);

    const word = root[`word_${ch}`];

    word.on("pressmove", (event) => {
        let pt = { x: event.localX, y: event.localY };

        // console.log(`%c stageX : ${event.stageX} stageY : ${event.stageY}`, "color:#9fdba9");

        if (checkIfNearPoint(ch, pt, currentCanvas.currentPointIndex)) {

            OnDrawBrush(event);

            const threshold = getNextThreshold(word, wordsStrokePoints, ch);

            // 현재 포인트가 threshold 근처에 도달했는지 확인
            if (currentCanvas.currentPointIndex >= threshold - 2) {
                // word가 여러 획인 경우 && 아직 마지막 획이 아니라면
                if (word.hasMultipleStrokes && word.currentLabelIndex < word.labels.length - 1) {
                    word.currentLabelIndex++;
                    currentCanvas.currentPointIndex = threshold;

                    if (isDrawing) {
                        OnDrawEnd(event);
                    }

                    word.removeAllEventListeners("pressmove");
                    word.removeAllEventListeners("pressup");
                } else {
                    // 단일 획이거나, 여러 획인 경우 마지막 획인 경우
                    console.log("성공");
                    word.removeAllEventListeners("mousedown");
                    word.removeAllEventListeners("pressmove");
                    completeStrokeAnimation(ch, event);
                }
            }
        } else {
            if (isDrawing) {
                OnDrawEnd(event);
            }

            word.removeAllEventListeners("pressmove");
            word.removeAllEventListeners("pressup");

            resetCanvasState();
        }
    });

    word.on("pressup", (event) => {
        console.log("pressup : " + word.name);
        if (isDrawing) {
            OnDrawEnd(event);
        }

        word.removeAllEventListeners("pressmove");
    }, null, true);
}

/**
 * 다음 경계(다음 label의 position 또는 전체 길이)를 반환하는 함수
 */
function getNextThreshold(word, wordsStrokePoints, ch) {
    if (word.hasMultipleStrokes && word.labels.length > 0) {
        // 마지막 label이 아니라면 다음 label의 position을 반환,
        // 마지막 label이면 전체 stroke의 길이를 반환
        return word.currentLabelIndex < word.labels.length - 1 ?
            word.labels[word.currentLabelIndex + 1].position :
            wordsStrokePoints[ch].length;
    }

    return wordsStrokePoints[ch].length;
}

/**
 * 단어별 획의 좌표 배열 가져오는 함수
 */
function getWordsStrokePathPoints() {
    let wordsStrokePoints = [];

    for (let ch of characters) {
        if (root[`word_${ch}`] === undefined) continue;

        currentWords.push(ch);

        let framePositions = getObjectFramePositions(root[`word_${ch}`]);
        wordsStrokePoints[ch] = framePositions;
    }



    return wordsStrokePoints;
}

/**
 *프레임별 포지션 가져오는 함수
*/
function getObjectFramePositions(object) {
    var freamPositions = [];

    const frameCount = object.totalFrames;

    for (var i = 0; i < frameCount; i++) {
        object.gotoAndStop(i);

        let pathPoints = { x: object.point.x, y: object.point.y };
        freamPositions.push(pathPoints);
    }

    object.point.visible = false;

    return freamPositions;
}

/** 
 * 사용자의 좌표가 목표 좌표와 가까운지 확인하는 함수
 * @param {}
 */
function checkIfNearPoint(wordChar, userPoint, targetPointIndex) {

    let pathPoints = wordsStrokePoints[wordChar];

    if (pathPoints && !pathPoints[targetPointIndex]) {
        console.log("%c없어 돌아가", "color:red");

        return false;
    }

    const curTargetPoints = pathPoints[targetPointIndex];
    const nextTargetPoints = pathPoints[targetPointIndex + 1];

    // 마지막이 아닐 때
    if (pathPoints[targetPointIndex + 1]) {

        const curDistance = getPointDistance(userPoint, curTargetPoints);
        const nextDistance = getPointDistance(userPoint, nextTargetPoints);

        // console.log(`%c현재 좌표: ${curDistance},\n%c다음 좌표: ${nextDistance}`, "color:#8cb4f5", "color:#dc8cf5"); 

        // 다음 좌표가 더 가까우면
        if (curDistance > nextDistance && nextDistance <= nextTargetRange) {

            currentCanvas.currentPointIndex++;

            console.log("다음 좌표로 이동");
            console.log("currentPointIndex : " + currentCanvas.currentPointIndex);
        } else if (curDistance < nextDistance && curDistance >= tolerance) {
            // 이전 좌표가 가까워진 경우
            // 나중에 이전 좌표가 가까워졌을 때의 예외처리도 필요
            console.log("이전 좌표로 이동");
            return false;
        } else if (curDistance >= tolerance) {

            //console.log("%c허용 오차 범위 밖임", "color:red");
            //console.log(`%c현재 좌표 : ${curDistance},\n%c다음 좌표 : ${nextDistance}`, "color:#8cb4f5", "color:#dc8cf5");
            return false;
        }

    } else { // 마지막일 때
        let curDistance = getPointDistance(userPoint, curTargetPoints);

        if (curDistance <= nextTargetRange) {
            currentCanvas.currentPointIndex++;
            console.log("마지막임!!\ncurrentPointIndex : " + currentCanvas.currentPointIndex);
        }
    }


    return true;
}

/**
 * Point간의 거리를 가져오는 함수
 * @param {Point} curPoint 기준
 * @param {*} destPoint 목표
 * @returns 
 */
function getPointDistance(curPoint, destPoint) {

    return Math.sqrt(
        Math.pow(curPoint.x - destPoint.x, 2) +
        Math.pow(curPoint.y - destPoint.y, 2)
    );
}

/**
 * 획 완료 후 실행되는 함수
 */
function completeStrokeAnimation(ch, event) {
    if (isDrawing == false)
        return;

    wordCompletionStatus[ch] = true;

    console.log("completeStrokeAnimation");

    OnDrawEnd(event);
    createCompletionCanvas();
}

/**
 * 획 완료했을 때 획의 색을 채워주는 함수
 */
function createCompletionCanvas() {
    let rgb = hexToRgb(paletteColor);

    console.log("여기임둥");

    const bound = currentCanvas.nominalBounds;

    currentCanvas.filters = [
        new createjs.ColorFilter(0, 0, 0, 1, rgb.r, rgb.g, rgb.b, 0)
    ];

    currentCanvas.cache(0, 0, bound.width, bound.height);
    console.log(new createjs.Bitmap(currentCanvas.cacheCanvas.toDataURL()));
}
]]></script>
              </Framescript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="word_a" color="#9933CC" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Symbol/word_a" name="word_a" centerPoint3DX="343.55" centerPoint3DY="372.95">
                  <matrix>
                    <Matrix tx="187.05" ty="164.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="word_G" color="#FF0000" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Symbol/word_G" name="word_G" centerPoint3DX="851.3" centerPoint3DY="399.05">
                  <matrix>
                    <Matrix tx="707.2" ty="216.2"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="bg" color="#00FFFF" locked="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMShape isDrawingObject="true">
                  <matrix>
                    <Matrix a="9.73399353027344" d="6.30683898925781" tx="-6858.55" ty="-1619.3"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="704.55" y="256.8"/>
                  </transformationPoint>
                  <fills>
                    <FillStyle index="1">
                      <SolidColor color="#2AABDB"/>
                    </FillStyle>
                  </fills>
                  <edges>
                    <Edge fillStyle1="1" edges="!14092 5135|16722 5135!16722 5135|16722 7672!16722 7672|14092 7672!14092 7672|14092 5135"/>
                  </edges>
                </DOMShape>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>